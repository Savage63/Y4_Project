import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.awt.event.ActionEvent;

public class RowInformationPage {
    private JFrame frame;
    private JTextArea textArea;
    private boolean isScanned = false;
    private String outputFolderPath = System.getProperty("user.home") + File.separator + "Project" + File.separator + "Devices";
    
    public RowInformationPage(Object[] rowData) 
    {
        initialize(rowData);
    }

    private void initialize(Object[] rowData) 
    {
        frame = new JFrame();
        frame.setTitle("Information for Row");
        frame.setBounds(100, 100, 834, 366);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().setLayout(new GridLayout(1, 2));

        JPanel infoPanel = new JPanel();
        String[] columnNames = { "Device Name", "IP Address", "MAC Address", "OS", "Manufacturer" };
        for (int i = 0; i < rowData.length; i++) 
        {
            JLabel label = new JLabel(columnNames[i] + ":");
            JLabel valueLabel = new JLabel(rowData[i].toString());
            infoPanel.add(label);
            infoPanel.add(valueLabel);
        }

        frame.getContentPane().add(infoPanel);
        infoPanel.setLayout(null);

        textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setBounds(593, 11, 215, 305);
        textArea.setLineWrap(true);
        infoPanel.add(textArea);

        JButton btnNewButton = new JButton("Resolve Issues");
        btnNewButton.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent e) 
            {
                // Run the ClosePorts class when the "Resolve Issues" button is clicked
                EmptyPortCloser closePorts = new EmptyPortCloser();
                closePorts.closeSpecifiedPorts();

                // Optionally, you can provide feedback or display a message here
                textArea.append("Ports resolved and closed.\n");
            }
        });
        
        btnNewButton.setBounds(10, 293, 573, 23);
        infoPanel.add(btnNewButton);

        JPanel displaypanel = new JPanel();
        displaypanel.setBounds(10, 11, 585, 247);
        infoPanel.add(displaypanel);

        JButton btnNewButton_1 = new JButton("Scan Device");
        btnNewButton_1.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent e) 
            {
                if (!isScanned) 
                {
                    textArea.setText("Device Scan Results:\n");
                    isScanned = true;

                    String ipAddress = rowData[1].toString(); // Get IP Address from the rowData array
                    String scanFolderPath = outputFolderPath + File.separator + ipAddress; // Folder path based on IP Address
                    String scanFilePath = scanFolderPath + File.separator + "EmptyPortsScan.txt"; // File path for scan results

                    try 
                    {
                        boolean scanSuccess = EmptyPortsScanner.scan(ipAddress, scanFilePath);

                        if (scanSuccess) 
                        {
                            textArea.append("Empty Ports Found!\n");
                            
                            // Retrieve and display the empty ports found
                            String emptyPorts = EmptyPortsScanner.getEmptyPorts(scanFilePath);
                            if (!emptyPorts.isEmpty()) 
                            {
                                textArea.append("Empty Ports Found: " + emptyPorts + "\n");
                            } 
                            else 
                            {
                                textArea.append("No Empty Ports Found.\n");
                            }
                        } 
                        else 
                        {
                            textArea.append("No Empty Ports Found.\n");
                        }
                    } 
                    catch (IOException ex) 
                    {
                        textArea.append("Scan Didn't\n"); // Handle the case when scan encounters an exception
                        ex.printStackTrace();
                    }
                } 
                else 
                {
                    textArea.setText("Device Scan Results:\n");
                }
            }
        });
        
        btnNewButton_1.setBounds(10, 267, 573, 23);
        infoPanel.add(btnNewButton_1);

        displaypanel.setLayout(new GridLayout(rowData.length, 2));
        for (int i = 0; i < rowData.length; i++) 
        {
            JLabel label = new JLabel(columnNames[i] + ":");
            JLabel valueLabel = new JLabel(rowData[i].toString());
            displaypanel.add(label);
            displaypanel.add(valueLabel);
        }
    }

    public void show() 
    {
        frame.setVisible(true);
    }

    public static void main(String[] args) 
    {
        RowInformationPage rowInfoPage = new RowInformationPage(new Object[]{"Device 1", "0.0.0.0", "00:11:22:33:44:55", "Linux", "Manufacturer"});
        rowInfoPage.show();
    }
}

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import java.awt.Desktop;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;

public class RowInformationPage 
{
    private JFrame frame;
    private JTextArea textArea;
    private boolean isScanned = false;
    private String outputFolderPath = System.getProperty("user.home") + File.separator + "Project" + File.separator + "Devices";
    private JButton resolveButton;
    private boolean emptyPortsFound = false;
    private boolean defaultCredentialsFound = false;
    private boolean defaultCredentialsResolved = false;
    private Object[] rowData; // You need to set this with actual data

    public RowInformationPage(Object[] rowData)
    {
        this.rowData = rowData;
        initialize(rowData);
    }

    private void initialize(final Object[] rowData) 
    {
        frame = new JFrame();
        frame.setTitle("Information for Row");
        frame.setBounds(100, 100, 834, 366);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().setLayout(new GridLayout(1, 2));
        frame.setResizable(false);

        JPanel infoPanel = new JPanel();
        String[] columnNames = { "Device Name", "IP Address", "MAC Address", "OS", "Manufacturer" };
        for (int i = 0; i < rowData.length; i++) 
        {
            JLabel label = new JLabel(columnNames[i] + ":");
            JLabel valueLabel = new JLabel(rowData[i].toString());
            infoPanel.add(label);
            infoPanel.add(valueLabel);
        }

        frame.getContentPane().add(infoPanel);
        infoPanel.setLayout(null);

        textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setBounds(593, 11, 215, 305);
        textArea.setLineWrap(true);
        infoPanel.add(textArea);

        JButton scanButton = new JButton("Scan Device");
        scanButton.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent e)
            {
                if (!isScanned) 
                {
                    textArea.setText("Device Scan Results:\n");
                    isScanned = true;

                    String ipAddress = rowData[1].toString();
                    String scanFolderPath = outputFolderPath + File.separator + ipAddress;
                    String scanFilePath = scanFolderPath + File.separator + "EmptyPortsScan.txt";

                    boolean scanSuccess = false;
                    boolean defaultCredentialsFound = false;

                    try 
                    {
                    	scanSuccess = EmptyPortsScanner.scan(ipAddress, scanFilePath);

                        if (scanSuccess) 
                        {
                            String emptyPorts = EmptyPortsScanner.getEmptyPorts(scanFilePath);
                            textArea.append("Empty Ports Found: " + emptyPorts + "\n");
                            emptyPortsFound = true;  // Set the emptyPortsFound flag
                            resolveButton.setEnabled(true);
                        }

                        defaultCredentialsFound = testDefaultCredentials(ipAddress);
                        if (defaultCredentialsFound) 
                        {
                            textArea.append("Default credentials found for " + ipAddress + "\n");
                            defaultCredentialsFound = true;  // Set the defaultCredentialsFound flag
                            resolveButton.setEnabled(true);
                        }
                    } 
                    catch (IOException ex) 
                    {
                        ex.printStackTrace();
                    }
                    if (!scanSuccess && !defaultCredentialsFound) 
                    {
                        textArea.append("No Vulnerabilities Found.\n");
                        resolveButton.setEnabled(false);
                    }
                } 
                else 
                {
                    textArea.append("Scan Failed!\n");
                }
            }
        });


        scanButton.setBounds(10, 267, 573, 23);
        infoPanel.add(scanButton);

        resolveButton = new JButton("Resolve Issues");
        resolveButton.setEnabled(false);
        resolveButton.addActionListener(new ActionListener() 
        {
            public void actionPerformed(ActionEvent e) 
            {
                if (emptyPortsFound) 
                {
                    EmptyPortCloser closePorts = new EmptyPortCloser();
                    closePorts.closeSpecifiedPorts(null);
                    textArea.append("Empty ports resolved and closed.\n");
                }

                if (defaultCredentialsFound && !defaultCredentialsResolved) 
                {
                    textArea.append("Default credentials resolved.\n");
                    defaultCredentialsResolved = true; // Set the flag to true

                        // Assuming the ipAddress is the same as the rowData[1]
                        String ipAddress = rowData[1].toString();
                        String scanFolderPath = outputFolderPath + File.separator + ipAddress;
                        String changeCredentialsFilePath = scanFolderPath + File.separator + "ChangeCredentials.txt";

                        try 
                        {
                            // Check if the "ChangeCredentials.txt" file exists
                            File changeCredentialsFile = new File(changeCredentialsFilePath);
                            if (!changeCredentialsFile.exists()) 
                            {
                                // Create and write content to the file if it doesn't exist
                                if (changeCredentialsFile.createNewFile()) 
                                {
                                    // Write content to the file
                                    FileWriter writer = new FileWriter(changeCredentialsFile);
                                    writer.write("		How to Change User Credentials\n");
                                    writer.write("Step 1: visit http://" + ipAddress + "/\n");
                                    writer.write("Step 2: Enter Credentials.\n");
                                    writer.write("Step 3: Go to Settings Tab.\n");
                                    writer.write("Step 4: Open the Password Page.\n");
                                    writer.write("Step 5: Enter your Current Password.\n");
                                    writer.write("Step 6: Click Change Password.\n");
                                    writer.write("Step 7: Make sure the new password is 12-16 characters long, has Numbers, Upper & Lowercase Letters and Symbols.\n");
                                    writer.write("Step 6: Click Change Password\n");
                                    writer.close();
                                }
                            }

                            // Open the "ChangeCredentials.txt" file
                            if (Desktop.isDesktopSupported()) 
                            {
                                Desktop.getDesktop().open(changeCredentialsFile);
                            }
                        } 
                        catch (IOException ex) 
                        {
                            ex.printStackTrace();
                        }
                }
            }
        });

        resolveButton.setBounds(10, 293, 573, 23);
        infoPanel.add(resolveButton);

        JPanel displaypanel = new JPanel();
        displaypanel.setBounds(10, 11, 585, 247);
        infoPanel.add(displaypanel);
        displaypanel.setLayout(new GridLayout(rowData.length, 2));
        for (int i = 0; i < rowData.length; i++) 
        {
            JLabel label = new JLabel(columnNames[i] + ":");
            JLabel valueLabel = new JLabel(rowData[i].toString());
            displaypanel.add(label);
            displaypanel.add(valueLabel);
        }
    }
    
    public List<String> getEmptyPorts() 
    {
        String ipAddress = rowData[1].toString();
        String scanFolderPath = outputFolderPath + File.separator + ipAddress;
        String scanFilePath = scanFolderPath + File.separator + "EmptyPortsScan.txt";

        try 
        {
            boolean scanSuccess = EmptyPortsScanner.scan(ipAddress, scanFilePath);

            if (scanSuccess) 
            {
                String emptyPorts = EmptyPortsScanner.getEmptyPorts(scanFilePath);
                return List.of(emptyPorts.split(", "));
            }
        } 
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }

        return new ArrayList<>();
    }

    public void show() 
    {
        frame.setVisible(true);
    }

    public static void main(String[] args) 
    {
        RowInformationPage rowInfoPage = new RowInformationPage(new Object[]{"Device 1", "0.0.0.0", "00:11:22:33:44:55", "Linux", "Manufacturer"});
        rowInfoPage.show();
    }

    private boolean testDefaultCredentials(String ipAddress)
    {
        String[] usernames = {"admin", "root"};
        String[] passwords = {"admin", "root", "password", "12345"};

        for (String username : usernames) 
        {
            for (String password : passwords) 
            {
                if (testCredentials(ipAddress, username, password)) 
                {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean testCredentials(String ip, String username, String password) 
    {
        try 
        {
            URL url = new URL("http://" + ip);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            String userPass = username + ":" + password;
            String basicAuth = "Basic " + Base64.getEncoder().encodeToString(userPass.getBytes());
            connection.setRequestProperty("Authorization", basicAuth);

            connection.setRequestMethod("GET");

            int responseCode = connection.getResponseCode();
            return responseCode == HttpURLConnection.HTTP_OK;
        } 
        catch (IOException e) 
        {
            return false;
        }
    }
}
